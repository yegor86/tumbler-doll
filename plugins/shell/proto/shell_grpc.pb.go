// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/shell.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShellStreamingService_Sh_FullMethodName   = "/shellstream.ShellStreamingService/Sh"
	ShellStreamingService_Echo_FullMethodName = "/shellstream.ShellStreamingService/Echo"
)

// ShellStreamingServiceClient is the client API for ShellStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ShellStreamingService provides real-time streaming logs
type ShellStreamingServiceClient interface {
	Sh(ctx context.Context, in *ShellRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShellResponse], error)
	Echo(ctx context.Context, in *ShellRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShellResponse], error)
}

type shellStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShellStreamingServiceClient(cc grpc.ClientConnInterface) ShellStreamingServiceClient {
	return &shellStreamingServiceClient{cc}
}

func (c *shellStreamingServiceClient) Sh(ctx context.Context, in *ShellRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShellResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShellStreamingService_ServiceDesc.Streams[0], ShellStreamingService_Sh_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShellRequest, ShellResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellStreamingService_ShClient = grpc.ServerStreamingClient[ShellResponse]

func (c *shellStreamingServiceClient) Echo(ctx context.Context, in *ShellRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ShellResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ShellStreamingService_ServiceDesc.Streams[1], ShellStreamingService_Echo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShellRequest, ShellResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellStreamingService_EchoClient = grpc.ServerStreamingClient[ShellResponse]

// ShellStreamingServiceServer is the server API for ShellStreamingService service.
// All implementations must embed UnimplementedShellStreamingServiceServer
// for forward compatibility.
//
// ShellStreamingService provides real-time streaming logs
type ShellStreamingServiceServer interface {
	Sh(*ShellRequest, grpc.ServerStreamingServer[ShellResponse]) error
	Echo(*ShellRequest, grpc.ServerStreamingServer[ShellResponse]) error
	mustEmbedUnimplementedShellStreamingServiceServer()
}

// UnimplementedShellStreamingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShellStreamingServiceServer struct{}

func (UnimplementedShellStreamingServiceServer) Sh(*ShellRequest, grpc.ServerStreamingServer[ShellResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Sh not implemented")
}
func (UnimplementedShellStreamingServiceServer) Echo(*ShellRequest, grpc.ServerStreamingServer[ShellResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedShellStreamingServiceServer) mustEmbedUnimplementedShellStreamingServiceServer() {}
func (UnimplementedShellStreamingServiceServer) testEmbeddedByValue()                               {}

// UnsafeShellStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShellStreamingServiceServer will
// result in compilation errors.
type UnsafeShellStreamingServiceServer interface {
	mustEmbedUnimplementedShellStreamingServiceServer()
}

func RegisterShellStreamingServiceServer(s grpc.ServiceRegistrar, srv ShellStreamingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShellStreamingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShellStreamingService_ServiceDesc, srv)
}

func _ShellStreamingService_Sh_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShellRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShellStreamingServiceServer).Sh(m, &grpc.GenericServerStream[ShellRequest, ShellResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellStreamingService_ShServer = grpc.ServerStreamingServer[ShellResponse]

func _ShellStreamingService_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShellRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShellStreamingServiceServer).Echo(m, &grpc.GenericServerStream[ShellRequest, ShellResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ShellStreamingService_EchoServer = grpc.ServerStreamingServer[ShellResponse]

// ShellStreamingService_ServiceDesc is the grpc.ServiceDesc for ShellStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShellStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shellstream.ShellStreamingService",
	HandlerType: (*ShellStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sh",
			Handler:       _ShellStreamingService_Sh_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Echo",
			Handler:       _ShellStreamingService_Echo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/shell.proto",
}
